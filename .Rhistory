warning("'ef.level' is set to 'prey' and expect a vector of efficiencies but get a matrix instead.\n ef.level was then set to 'link.specific'")
ef.level = 'link.specific'
}
### first arrange mat: apply the biomass scaling of preferences if needed
### columns should sum to 1 for predators, 0 to preys
column.sum = colSums(mat)
# in the following, the as.matrix() is needed becaue sometimes mat[, column.sum > 0] is only one column and thanks to R, is automatically cast to a vector
if (bioms.prefs){
# 'apply functional' response of preferencs
# mat[, column.sum > 0] = apply(mat[, column.sum > 0], 2, function(vec, bioms) vec*biomasses/sum(vec*biomasses), biomasses) #! in the function I should use bioms instead biomasses
mat[, column.sum > 0] = apply(as.matrix(mat[, column.sum > 0]), 2, function(vec) vec*biomasses/sum(vec*biomasses)) #! in the function biomasses is already defined more globaly, so no need of another parameter
} else { # here optimise with else if not all element of colsums are equal to either 1 or 0...
# sum of entries have to sum to one for each predator (normalisaton of preferences)
colomn.sum = colSums(mat)
mat[, colomn.sum>0] = sweep(apply(as.matrix(mat[, colomn.sum>0])), 2, colomn.sum[colomn.sum>0], "/")
}
### define loss vector as the sum of species losses:
# need to check data input much more carefully...
if (! is.vector(losses)){ # this is for allowing user to input a loss matrix (different kinds of physiological loss in the same parameter)
losses = rowSums(losses)
}
if (bioms.losses == T){
losses = losses*biomasses
}
### then solving the system
# warning here: even if efficiencies are defined at the predator level I need a vector of legth = to number of species (with some arbitrary values for basal species)
# should be precised somewhere
if (ef.level == "pred"){
F = solve(diag(efficiencies) - mat) %*% losses
}
if (ef.level == "prey"){
vec.in = as.vector(t(mat) %*% efficiencies)
vec.1p = rep(0, dim(mat)[1])
vec.1p[colSums(mat) == 0] = 1
F = solve(diag(vec.in + vec.1p) - mat) %*% losses
}
if (ef.level == "link.specific"){
U = mat * efficiencies
vec.one = rep(1, dim(efficiencies)[1])
vec.1p = rep(0, dim(mat)[1])
vec.1p[colSums(mat) == 0] = 1
vec.in = as.vector(t(U)%*%vec.one + vec.1p)
F = solve(diag(vec.in) - mat) %*% losses
}
if (any(F < 0)){
stop("model chosen is unable to determine fluxes accoringly to data")
}
### set individual fluxes (each element of ith line from mat.norm is multiplied bu the ith element of F)
flux.mat = sweep(mat, 2, F, "*")
return(flux.mat)
}
create.jacob = function(val.mat, biomasses, losses, efficiencies, growth.rate, bioms.prefs = TRUE, bioms.losses = TRUE, ef.level = "prey"){
nb_s = dim(val.mat)[1]
nb_b = sum(colSums(val.mat) == 0)
jacob = matrix(0, nb_s, nb_s)
basal.index = which(colSums(val.mat) == 0) # store the position of basal species in arguments
for (i in 1:nb_s){
for (j in 1: nb_s){
if (i == j){
if (i %in% basal.index){ # then species i is basal
jacob[i,j] = growth.rate[which(basal.index == i)] - sum(val.mat[i,])/biomasses[i]
} else{
if (ef.level == "pred") {
jacob[i,j] = -losses[i] + val.mat[i,j] * (efficiencies[i] - 1) / biomasses[i] +
efficiencies[i] * sum(val.mat[,i])/biomasses[i] - sum(val.mat[i,]) / biomasses[i]
}
if (ef.level == "prey" && is.vector(efficiencies)){
jacob[i,j] = -losses[i] + val.mat[i,j] * (efficiencies[i] - 1) / biomasses[i] +
sum(val.mat[,i] * efficiencies) / biomasses[i] - sum(val.mat[i,]) / biomasses[i]
}
if (ef.level == "link.specific"){
jacob[i,j] = -losses[i] + val.mat[i,j] * (efficiencies[i,i] - 1) / biomasses[i] +
sum(val.mat[,i] * efficiencies[,i]) / biomasses[i] - sum(val.mat[i,]) / biomasses[i]
}
}
} else{
if (ef.level == "pred") {jacob[i,j] = (efficiencies[i]*val.mat[j,i] - val.mat[i,j])/biomasses[j]}
if (ef.level == "prey" && is.vector(efficiencies)) {jacob[i,j] = (efficiencies[j]*val.mat[j,i] - val.mat[i,j])/biomasses[j]}
# should change the following line to consider a flag for efficiencies = "link.level" instead of checking if it's a matri or not
if (ef.level == "link.specific") {jacob[i,j] = (efficiencies[j,i]*val.mat[j,i] - val.mat[i,j])/biomasses[j]}
}
}
}
return(jacob)
}
make.stability = function(val.mat,
biomasses,
losses,
efficiencies,
growth.rate,
losses.scale = NULL,
bioms.prefs = TRUE,
bioms.losses = TRUE,
ef.level = "prey",
interval = c(1e-12,1),
...){
stability.value.wrapper = function(x, unvariant, col, val.mat, biomasses, efficiencies, growth.rate, bioms.prefs, bioms.losses, ef.level){
tot.losses = x*col + unvariant
return(stability.value(val.mat, biomasses, tot.losses, efficiencies, growth.rate, bioms.prefs, bioms.losses, ef.level))
}
# mat
if (! is.numeric(val.mat)){
stop("'val.mat' must be numeric")
}
if (dim(val.mat)[1] != dim(val.mat)[2]){
stop("val.mat should be a square matrix")
}
nb_s = dim(val.mat)[1]
# biomasses
if (! is.vector(biomasses)){
stop("biomasses should be a vector")
} else{
if (length(biomasses) != dim(val.mat)[1]){
stop("length of biomasses vector should equal to dimensions of val.mat")
}
}
if (! is.numeric(biomasses)){
stop("'biomasses' must be numeric")
} else if (any(biomasses <= 0)){
stop("'biomasses' must be all >0")
}
# losses
if (! is.numeric(losses)){
stop("'losses' should be numeric")
} else if (any(losses < 0)){
stop("'losses' contain negative value(s)")
}
# efficiences
if (! is.numeric(efficiencies)){
stop("'efficiencies' must be numeric")
if (!(any(efficiencies < 0) || any(efficiencies > 1))) {
stop("'efficiencies' must be all in interval [0,1]")
}
if (is.vector(efficiencies)){
if (length(efficiencies) != dim(val.mat)[1]){
stop("'efficiencies' vector length sould be equal to number of species (dimension of val.mat)")
}
} else if (dim(efficiencies != dim(val.mat))){
stop("'efficiencies' matrix dimension different from 'val.mat'")
}
}
#ef.level
if ((ef.level != "prey") && (ef.level != "pred")){
stop("ef.level should be either 'pred' or 'prey'")
}
# growth.rate
if (! is.numeric(growth.rate)){
stop("growth.rate should be numeric")
} else if (any(growth.rate < 0)){
stop("all growth.rate values are expected to be positive (or 0)")
}
if (!is.vector(growth.rate)){
stop("growth.rate should be a vector")
} else if (length(growth.rate) != sum(colSums(val.mat) == 0)){
stop("length of growth.rate vector should be equal to the number of primary producer (species with no prey)")
}
# compute losses
# here, operation is:
# final.losses = colSums(invariant + value*col), where value is the value to estimate
if (missing(losses.scale)){
if (is.vector(losses)){
unvariant = rep(0, nb_s)
col = losses
}
if (is.matrix(losses)){
#generate a warning as behaviour will be the same as losses.scale = false?
unvariant = colSums(losses)
col = rep[1, nb_s]
}
} else{
if (is.numeric(losses.scale) && !is.integer(losses.scale)){
stop("losses.scale should be a either character or non integer numeric")
}
if (is.vector(losses) && losses.scale == FALSE){
unvariant = losses
col = rep(1, nb_s)
}
if (is.matrix(losses) && losses.scale == FALSE){
unvariant = colSums(losses)
col = rep(1, nb_s)
}
if (is.matrix(losses) && is.integer(losses.scale)){
if ((losses.scale <1 ) || (losses.scale > dim(val.mat[1]))){
stop("losses.scale should be between 1 and species number")
}
col = losses[,losses.scale]
unvariant = colSums(losses[, -losses.scale])
}
if (is.matrix(losses) && is.character(losses.scale)){
if (!(losses.scale %in% names(losses))){
stop("losses.scale not a column name of losses")
}
col = losses[,names(losses.scale) == losses.scale]
unvariant = colSums(losses[, colnames(losses) != losses.scale])
}
}
# get stability values to at the interval boundaries
stab.upper = stability.value.wrapper(max(interval), unvariant, col, val.mat, biomasses, efficiencies, growth.rate, bioms.prefs, bioms.losses, ef.level)
stab.lower =  stability.value.wrapper(min(interval), unvariant, col, val.mat, biomasses, efficiencies, growth.rate, bioms.prefs, bioms.losses, ef.level)
if (stab.lower < 0 && stab.upper <0){
stop("unable to assess minimal stability value: system always stable in specified interval.")
}
if (stab.lower > 0 && stab.upper > 0){
stop("unable to assess minimal stability value: system never stable in specified interval.")
}
min.stab.value = stats::uniroot(stability.value.wrapper, interval, ..., unvariant, col, val.mat, biomasses, efficiencies, growth.rate, bioms.prefs, bioms.losses, ef.level,
lower = min(interval), upper = max(interval), f.lower = stab.lower, f.upper = stab.upper)
return(min.stab.value)
}
val.mat = fluxing(groups.level$mat, groups.level$biomasses, losses, groups.level$efficiencies, bioms.pref = TRUE, ef.level = "pred")
make.stability(val.mat, groups.level$biomasses, losses, groups.level$efficiencies, growth.rates, ef.level = "pred")
stability.value = function(val.mat,
biomasses,
losses,
efficiencies,
growth.rate,
bioms.prefs = TRUE,
bioms.losses = TRUE,
ef.level = "prey",
full.output = FALSE){
# mat
if (! is.numeric(val.mat)){
stop("'val.mat' must be numeric")
}
if (dim(val.mat)[1] != dim(val.mat)[2]){
stop("val.mat should be a square matrix")
}
# biomasses
if (! is.vector(biomasses)){
stop("biomasses should be a vector")
} else{
if (length(biomasses) != dim(val.mat)[1]){
stop("length of biomasses vector should equal to dimensions of val.mat")
}
}
if (! is.numeric(biomasses)){
stop("'biomasses' must be numeric")
} else if (any(biomasses <= 0)){
stop("'biomasses' must be all >0")
}
# losses
if (! is.numeric(losses)){
stop("'losses' should be numeric")
} else if (any(losses < 0)){
stop("'losses' contain negative value(s)")
}
# efficiences
if (! is.numeric(efficiencies)){
stop("'efficiencies' must be numeric")
if (!(any(efficiencies < 0) || any(efficiencies > 1))) {
stop("'efficiencies' must be all in interval [0,1]")
}
if (is.vector(efficiencies)){
if (length(efficiencies) != dim(val.mat)[1]){
stop("'efficiencies' vector length sould be equal to number of species (dimension of val.mat)")
}
} else if (dim(efficiencies != dim(val.mat))){
stop("'efficiencies' matrix dimension different from 'val.mat'")
}
}
if (!(ef.level %in% c('prey', 'pred', 'link.specific'))){
stop("ef.level should be set to 'pred', 'prey' or 'link.specific'")
}
if (ef.level == 'prey' && is.matrix(efficiencies)){ # if user did not change the ef.level = "prey" optional argument but provide a matrix for efficiencies:
warning("'ef.level' is set to 'prey' and expect a vector of efficiencies but get a matrix instead.\n ef.level was then set to 'link.specific'")
ef.level = 'link.specific'
}
# growth.rate
if (! is.numeric(growth.rate)){
stop("growth.rate should be numeric")
} else if (any(growth.rate < 0)){
stop("all growth.rate values are expected to be positive (or 0)")
}
if (!is.vector(growth.rate)){
stop("growth.rate should be a vector")
} else if (length(growth.rate) != sum(colSums(val.mat) == 0)){
stop("length of growth.rate vector should be equal to the number of primary producer (species with no prey)")
}
### define loss vector as the sum of species losses:
if (! is.vector(losses)){
losses = rowSums(losses)
}
if (bioms.losses == T){
losses = losses*biomasses
}
nb_s = dim(val.mat)[1]
nb_b = sum(colSums(val.mat) == 0)
jacob = matrix(0, nb_s, nb_s)
jacob = create.jacob(val.mat, biomasses, losses, efficiencies, growth.rate, bioms.prefs = TRUE, bioms.losses = TRUE, ef.level = "prey")
# return(eigen(jacob))
if (full.output){
# should also return the jacobian
return(eigen(jacob))
} else{
return(max(Re(eigen(jacob)$values)))
}
}
make.stability(val.mat, groups.level$biomasses, losses, groups.level$efficiencies, growth.rates, ef.level = "pred")
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
tab = read.csv('/homes/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/exp_results.csv')
head(tab)
tab = read.csv('/homes/bg33novu/projects/WarmingWebs/WarmingHPC/outputs/exp_results.csv', header = T)
head(tab)
tab$network[tab$resilience == 'integration_err']
source('~/.active-rstudio-document')
a = c(1,2,3,4,5,6,7,10,12)
which(a ==5)
which(a ==12)
a[1] = 5
a
which(a ==5)
a = c(a, NA)
is.na(a)
sum(is.na(a))
getwd()
load(group.level)
load(groups.level)
load(data/groups.level)
load(data/group.level)
load(data/groups.level.Rdata)
load(data/groups.level.RData)
load(/homes/bg33novu/projects/fluxing_webs/fluxweb/data/groups.level.RData)
load('/homes/bg33novu/projects/fluxing_webs/fluxweb/data/groups.level.RData')
#' losses = 0.15 * groups.level$bodymasses^(-0.25)
#' growth.rates = rep(0.5, length(groups.level$biomasses[colSums(groups.level$mat) == 0]))
losses = 0.15 * groups.level$bodymasses^(-0.25)
growth.rates = rep(NA, dimval.mat[1])
growth.rates = rep(NA, dim(val.mat[1]))
fluxing(groups.level$mat, groups.level$biomasses, losses, groups.level$efficiencies, bioms.pref = TRUE, ef.level = "prey")
fluxing = function(mat, biomasses = NULL, losses, efficiencies, bioms.prefs = TRUE, bioms.losses = TRUE, ef.level = "prey"){
# mat
if (! is.numeric(mat)){
stop("'mat' must be numeric")
}
if (dim(mat)[1] != dim(mat)[2]){
stop("mat should be a square matrix")
}
# biomasses
if (!is.null(biomasses)){
if (! is.vector(biomasses)){
stop("biomasses should be a vector")
} else{
if (length(biomasses) != dim(mat)[1]){
stop("length of biomasses vector should equal to dimensions of mat")
}
}
if (! is.numeric(biomasses)){
stop("'biomasses' must be numeric")
} else if (any(biomasses < 0)){
stop("'biomasses' must be all >=0")
}
} else if (bioms.prefs){
stop("bioms.prefs set to TRUE but no biomasses provided")
}
# losses
if (! is.numeric(losses)){
stop("'losses' should be numeric")
} else if (any(losses < 0)){
stop("'losses' contain negative value(s)")
}
# efficiences
if (! is.numeric(efficiencies)){
stop("'efficiencies' must be numeric")
if (!(any(efficiencies < 0) || any(efficiencies > 1))) {
stop("'efficiencies' must be all in interval [0,1]")
}
if (is.vector(efficiencies)){
if (length(efficiencies) != dim(mat)[1]){
stop("'efficiencies' vector length sould be equal to number of species (dimension of mat)")
}
} else if (dim(efficiencies != dim(mat))){
stop("'efficiencies' matrix dimension different from 'mat'")
}
}
if (!(ef.level %in% c('prey', 'pred', 'link.specific'))){
stop("ef.level should be set to 'pred', 'prey' or 'link.specific'")
}
if (ef.level == 'prey' && is.matrix(efficiencies)){ # if user did not change the ef.level = "prey" optional argument but provide a matrix for efficiencies:
warning("'ef.level' is set to 'prey' and expect a vector of efficiencies but get a matrix instead.\n ef.level was then set to 'link.specific'")
ef.level = 'link.specific'
}
### first arrange mat: apply the biomass scaling of preferences if needed
### columns should sum to 1 for predators, 0 to preys
column.sum = colSums(mat)
# in the following, the as.matrix() is needed becaue sometimes mat[, column.sum > 0] is only one column and thanks to R, is automatically cast to a vector
if (bioms.prefs){
# 'apply functional' response of preferencs
# mat[, column.sum > 0] = apply(mat[, column.sum > 0], 2, function(vec, bioms) vec*biomasses/sum(vec*biomasses), biomasses) #! in the function I should use bioms instead biomasses
mat[, column.sum > 0] = apply(as.matrix(mat[, column.sum > 0]), 2, function(vec) vec*biomasses/sum(vec*biomasses)) #! in the function biomasses is already defined more globaly, so no need of another parameter
} else { # here optimise with else if not all element of colsums are equal to either 1 or 0...
# sum of entries have to sum to one for each predator (normalisaton of preferences)
colomn.sum = colSums(mat)
mat[, colomn.sum>0] = sweep(apply(as.matrix(mat[, colomn.sum>0])), 2, colomn.sum[colomn.sum>0], "/")
}
### define loss vector as the sum of species losses:
# need to check data input much more carefully...
if (! is.vector(losses)){ # this is for allowing user to input a loss matrix (different kinds of physiological loss in the same parameter)
losses = rowSums(losses)
}
if (bioms.losses == T){
losses = losses*biomasses
}
### then solving the system
# warning here: even if efficiencies are defined at the predator level I need a vector of legth = to number of species (with some arbitrary values for basal species)
# should be precised somewhere
if (ef.level == "pred"){
F = solve(diag(efficiencies) - mat) %*% losses
}
if (ef.level == "prey"){
vec.in = as.vector(t(mat) %*% efficiencies)
vec.1p = rep(0, dim(mat)[1])
vec.1p[colSums(mat) == 0] = 1
F = solve(diag(vec.in + vec.1p) - mat) %*% losses
}
if (ef.level == "link.specific"){
U = mat * efficiencies
vec.one = rep(1, dim(efficiencies)[1])
vec.1p = rep(0, dim(mat)[1])
vec.1p[colSums(mat) == 0] = 1
vec.in = as.vector(t(U)%*%vec.one + vec.1p)
F = solve(diag(vec.in) - mat) %*% losses
}
if (any(F < 0)){
stop("model chosen is unable to determine fluxes accoringly to data")
}
### set individual fluxes (each element of ith line from mat.norm is multiplied bu the ith element of F)
flux.mat = sweep(mat, 2, F, "*")
return(flux.mat)
}
fluxing(groups.level$mat, groups.level$biomasses, losses, groups.level$efficiencies, bioms.pref = TRUE, ef.level = "prey")
val.mat = fluxing(groups.level$mat, groups.level$biomasses, losses, groups.level$efficiencies, bioms.pref = TRUE, ef.level = "prey")
growth.rates = rep(NA, dim(val.mat[1]))
growth.rates = rep(NA, dim(val.mat)[1])
rowth.rates[colSums(groups.level$mat) == 0] = 0.5
growth.rates[colSums(groups.level$mat) == 0] = 0.5
growth.rates
colSums(groups.level$mat)
#' val.mat = fluxing(groups.level$mat, groups.level$biomasses, losses, groups.level$efficiencies, bioms.pref = TRUE, ef.level = "pred")
#' stability.value(val.mat, groups.level$biomasses, losses, groups.level$efficiencies, growth.rates, ef.level = "pred")
devtools::build()
devtools::document()
devtools::build()
getwd()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
sum(is.na(growth.rate[colSums(val.mat)!=0])) > 0
growth.rate = growth.rates
sum(is.na(growth.rate[colSums(val.mat)!=0])) > 0
colSums(val.mat)
growth.rate
growth.rate[colSums(val.mat)!=0]
sum(growth.rate[colSums(val.mat)!=0])
growth.rate[which(colSums(val.mat)==0)]
sum(is.na(growth.rate[which(colSums(val.mat)==0)]))
sum(!is.na(growth.rate[colSums(val.mat)!=0]))
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()\
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
run devtools::release()
devtools::release()
devtools::release()
build_win()
devtools::build_win()
devtools::build_win()
devtools::release()
devtools::use_cran_comments()
devtools::release()
devtools::release()
devtools::release()
install.packages("fluxweb")
install.packages("fluxweb")
install.packages("fluxweb", lib="/homes/bg33novu/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("~/projects/fluxing_webs/fluxweb_0.1.0.tar.gz", repos = NULL, type = "source", lib="/homes/bg33novu/R/x86_64-pc-linux-gnu-library/3.4")
library(fluxweb)
devtools::document()
devtools::build()
devtools::release()
tl = rnorm(100, 0, 1)
hist(tl)
tl = rnorm(500, 0, 1)
hist(tl)
hist(exp(tl))
tl2 = rnorm(500, 0, 0.1)
hist(exp(tl2))
