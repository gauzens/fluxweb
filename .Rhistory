res1 = cbind.data.frame(exts.t1, light, param$t1)
names(res1) = c("extinctions", "light", "temperature")
model <- initialise_default_Unscaled_nuts(model, L, temperature = param$t2)
model$S = rep(param$S, param$n_nut)
exts.t2 = sapply(light, run.light, model,
light.effect = param$light.effect, period = param$period)
res2 = cbind.data.frame(exts.t2, light, param$t2)
names(res2) = c("extinctions", "light", "temperature")
return(rbind.data.frame(res1,res2))
}
devtools::check_rhub()
devtools::check_mac_release()
devtools::install_github(gauzens\fluxweb)
devtools::install_github(gauzens/fluxweb)
devtools::install_github("gauzens/fluxweb")
mat.fluxes = fluxing(groups.level$mat,
groups.level$biomasses,
0.71*groups.level$bodymasses,
groups.level$efficiencies)
library(fluxweb)
mat.fluxes = fluxing(groups.level$mat,
groups.level$biomasses,
0.71*groups.level$bodymasses,
groups.level$efficiencies)
met.types = rep("animals", nrow(mat.fluxes))
met.types[groups.level$efficiencies == 0.545] = "plants"
met.types
met.types[1] = "detritus"
jacob = create.jacob(mat.fluxes, groups.level$biomasses, groups.level$efficiencies, met.types)
create.jacob
val.mat = mat.fluxes
plants = metabolic.types == "plant"
detritus = metabolic.types == "detritus"
ef.level = "prey"
biomasses = groups.level$biomasses
metabolic.types = met.types
plants = metabolic.types == "plant"
detritus = metabolic.types == "detritus"
ef.level = "prey"
biomasses = groups.level$biomasses
plants
metabolic.types
met.types = rep("animal", nrow(mat.fluxes))
met.types[groups.level$efficiencies == 0.545] = "plant"
met.types[1] = "detritus"
jacob = create.jacob(mat.fluxes, groups.level$biomasses, groups.level$efficiencies, met.types)
expect_equal(0, sum(is.na(jacob)))
val.mat = mat.fluxes
nb_s = dim(val.mat)[1]
nb_b = sum(colSums(val.mat) == 0)
jacob = matrix(0, nb_s, nb_s)
metabolic.types = met.types
plants = metabolic.types == "plant"
detritus = metabolic.types == "detritus"
ef.level = "prey"
biomasses = groups.level$biomasses
detritus = metabolic.types == "detritus"
detritus
jacob = sweep(t(jacob), MARGIN = 2, efficiencies, "*") -
val.mat
efficiencies = groups.level$efficiencies
jacob = sweep(t(jacob), MARGIN = 2, efficiencies, "*") -
val.mat
jacob = sweep(jacob, MARGIN = 2, biomasses, "/")
diag(jacob) = (diag(val.mat)/biomasses) * (efficiencies -
1)
jacob
create.jacob
diag(jacob)[plants] = 0
diag(jacob)[detritus] = colSums(val.mat[detritus, , drop = FALSE])/biomasses[detritus]
val.mat[detritus, , drop = FALSE]
diag(jacob)[detritus] = rowSums(val.mat[detritus, , drop = FALSE])/biomasses[detritus]
create.jacob = function(val.mat, biomasses, efficiencies, metabolic.types, ef.level = "prey"){
mat.fluxes = fluxing(groups.level$mat,
groups.level$biomasses,
0.71*groups.level$bodymasses,
groups.level$efficiencies)
met.types = rep("animals", nrow(mat.fluxes))
met.types[groups.level$efficiencies == 0.545] = "plants"
met.types[1] = "detritus"
met.types = rep("animal", nrow(mat.fluxes))
met.types[groups.level$efficiencies == 0.545] = "plant"
met.types[1] = "detritus"
jacob = create.jacob(mat.fluxes, groups.level$biomasses, groups.level$efficiencies, met.types)
expect_equal(0, sum(is.na(jacob)))
jacob
?stability.value
losses = 0.15 * groups.level$bodymasses^(-0.25)
# define metbolic types:
met.types = rep('animal', length(losses))
met.types[groups.level$efficiencies == 0.545] = 'plant'
val.mat = fluxing(groups.level$mat,
groups.level$biomasses,
losses,
groups.level$efficiencies,
bioms.pref = TRUE,
ef.level = "pred")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies,
metabolic.types = met.types,
ef.level = "pred")
met.types[1] = "detritus"
losses = 0.15 * groups.level$bodymasses^(-0.25)
# define metbolic types:
met.types = rep('animal', length(losses))
met.types[groups.level$efficiencies == 0.545] = 'plant'
val.mat = fluxing(groups.level$mat,
groups.level$biomasses,
losses,
groups.level$efficiencies,
bioms.pref = TRUE,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies,
metabolic.types = met.types,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.000001,
metabolic.types = met.types,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.1,
metabolic.types = met.types,
ef.level = "prey")
val.mat = fluxing(groups.level$mat,
groups.level$biomasses,
losses,
groups.level$efficiencies,
bioms.pref = TRUE,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.1,
metabolic.types = met.types,
ef.level = "prey")
val.mat
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies,
metabolic.types = met.types,
ef.level = "prey")
groups.level$efficiencies
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.1,
metabolic.types = met.types,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.9,
metabolic.types = met.types,
ef.level = "prey")
stability.value(val.mat,
groups.level$biomasses,
groups.level$efficiencies*0.0000000001,
metabolic.types = met.types,
ef.level = "prey")
j = create.jacob(val.mat,
groups.level$biomasses,
groups.level$efficiencies,
metabolic.types = met.types,
ef.level = "prey")
j
diag(j) = 12
eigen(j)$values
j
diag(j) = 1
eigen(j)$values
diag(j) = -1
eigen(j)$values
diag(j) = -0.2
eigen(j)$values
diag(j) = -0.02
eigen(j)$values
j = create.jacob(val.mat,
groups.level$biomasses,
groups.level$efficiencies,
metabolic.types = met.types,
ef.level = "prey")
eigen(j)$values
diag(j)
eigen(j)$values
sort(eigen(j)$values)
diag(j) = diag(j)*0.02
sort(eigen(j)$values)
diag(j) = diag(j)*4.02
sort(eigen(j)$values)
diag(j) = diag(j)*4.02
sort(eigen(j)$values)
diag(j) = diag(j)*4.02
sort(eigen(j)$values)
diag(j) = diag(j)*4.02
sort(eigen(j)$values)
diag(j) = diag(j)*4.02
sort(eigen(j)$values)
library(fluxweb); library(cheddar); library(igraph); library(RColorBrewer); library(colorspace); library(sp); library(dplyr)
install.packages("cheddar")
library(fluxweb); library(cheddar); library(igraph); library(RColorBrewer); library(colorspace); library(sp); library(dplyr)
setwd("/home/bg33novu/projects/Andrew/code")
options(stringsAsFactors=FALSE)
## Put the food webs into FUSED format
boltz <- 0.00008617343
T0 <- 273.15 + 20   ## Use 20 degrees as standardised temperature across all dataset
perday <- 60*60*24
meta <- read.csv("Adirondack Lakes/Adirondack_metadata.csv")
meta$study_ID <- rep('Adirondack lakes', nrow(meta))
meta$FW_name <- meta$FW_name_database
meta <- read.csv("/Adirondack Lakes/Adirondack_metadata.csv")
setwd("/home/bg33novu/projects/Andrew/code/Adirondack Lakes")
meta <- read.csv("Lakes_metadata.csv")
meta$FW_name <- meta$FW_name_database
lakes <- unique(meta$FW_name)
lakes <- lakes[-50] # remove Wolf Lake - missing pages in report, no density data
for(i in 1:length(lakes)) {
# imports
lake <- NULL; nodes <- NULL; matrix<-NULL
lake <- lakes[i]
nodes <- read.csv(paste0("sp_att/Adirondack_spAttributes_",lake,".csv"))
# corrections to match database
nodes$taxonomy[nodes$taxonomy=="Salmo trutta"] <- "Salmo rutta" # should be trutta but match to incorrect edgelist
nodes$taxonomy[nodes$taxonomy=="Anabaena flos-aquae"] <- "Anabaena flos.aquae"
matrix <- as.matrix(read.csv(paste0("adj_mat/Adirondack_matrix_",lake,".csv"), row.names = 1))
# check order
nodes <- nodes[order(nodes$taxonomy),]
matrix <- matrix[order(colnames(matrix)),order(colnames(matrix))]
print(i)
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# remove taxa that do not have matches, and with 0 density
unmatched.rows <- NULL; fishy <- NULL; detr <- NULL
unmatched.rows <- which(is.na(nodes$Count.of.Lake_species)) # which are missing? Could not be matched with density from report
eggs <- which(grepl("fish eggs", nodes$Lake_species)) # but keep fish eggs
detr <- which(grepl("detritus", nodes$Lake_species))  # but keep detritus
nauplii <- which(grepl("nauplii", nodes$Lake_species))
unmatched.rows <- unmatched.rows[!(unmatched.rows %in% c(detr))] ## <--- add 'eggs' here to keep eggs
phyto0 <- which(is.na(nodes$density) & nodes$species_type == "phytoplankton") # phytoplankton with 0 density reported
unmatched.rows <- c(unmatched.rows, phyto0)
if(length(unmatched.rows)>0) {
nodes <- nodes[-unmatched.rows,]
matrix <- matrix[-unmatched.rows,-unmatched.rows]
}
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# temperature
temp <- meta$mean_temp_C[meta$FW_name_database==lake]
temp.kT <- ((273.15+temp)-T0)/(boltz*(273.15+temp)*T0)
# losses
nodes$losses <- 0
nodes$losses[nodes$metabolic.type=="invertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="invertebrate"]
nodes$losses[nodes$metabolic.type=="ectotherm vertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="ectotherm vertebrate"]) + 18.47) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="ectotherm vertebrate"]
## Loses for fish eggs?? - unknown density - currently these are omitted anyway
nodes$losses[is.na(nodes$losses)] <- 0
# efficiencies
nodes$efficiencies[nodes$species_type=="zooplankton" | nodes$species_type=="fish"] <- exp(2.266)*exp(0.164*temp.kT) / (1 + exp(2.266)*exp(0.164*temp.kT)) #animal
nodes$efficiencies[nodes$species_type=="phytoplankton"] <- exp(0.179)*exp(0.164*temp.kT) / (1 + exp(0.179)*exp(0.164*temp.kT)) # plant
nodes$efficiencies[nodes$species_type=="detritus"] <- exp(-1.670)*exp(0.164*temp.kT) / (1 + exp(-1.670)*exp(0.164*temp.kT)) #detritus
# preferences (biomass matrix)
B.matrix <- matrix * nodes$biomass
# missing detritus node given sum of phytoplankton biomass for each predator (i.e. equal weight to green/brown origin)
missing.detritus <- nodes$species_type=="detritus"
B.matrix[missing.detritus,] <- rep(colSums(B.matrix[nodes$species_type=="phytoplankton",], na.rm=T) / sum(missing.detritus), each=sum(missing.detritus))
B.matrix[matrix!=0 & B.matrix==0] <- 1 # for when detritus is the only food source
# missing fish eggs
#missing.fish <- nodes$taxonomy=="fish eggs"
#B.matrix[missing.fish,] <-
## Fluxweb analysis
diag(B.matrix) <- 0   ## Make sure there are no cannibalistic links
bin.matrix <- B.matrix
bin.matrix[bin.matrix>0] <- 1
igraph <- graph_from_adjacency_matrix(bin.matrix, mode="directed")
attributes <- nodes
attributes$losses[is.na(attributes$losses)] <- 0
## Calculating fluxes
flux <- fluxing(mat=B.matrix, losses=attributes$losses, efficiencies=attributes$efficiencies, bioms.losses=F, bioms.prefs = F) * perday
meta$flux[i] <- sum(flux)
meta$animal.flux[i] <- sum(flux[attributes$species_type=="zooplankton" | attributes$species_type=="fish",])
meta$plant.flux[i] <- sum(flux[attributes$species_type=="phytoplankton",])
meta$detritus.flux[i] <- sum(flux[attributes$species_type=="detritus",])
meta$ratio.flux[i] <- meta$animal.flux[i] / sum(meta$plant.flux[i] + meta$detritus.flux[i])
## Biomass distributions
meta$biomass[i] <- sum(attributes$biomass, na.rm=T)
meta$animal.biomass[i] <- sum(attributes$biomass[attributes$species_type=="zooplankton" | attributes$species_type=="fish"], na.rm=T)
meta$plant.biomass[i] <- sum(attributes$biomass[attributes$species_type=="phytoplankton"], na.rm=T)
#meta$detritus.biomass[i] <- sum(attributes$biomass[attributes$species_type=="detritus"], na.rm=T)
meta$ratio.biomass[i] <- meta$animal.biomass[i] / meta$plant.biomass[i]
meta$MNslope[i] <- coef(lm(log10(attributes$density.comb[attributes$taxonomy!="detritus"]) ~ log10(attributes$mass.mean.g.[attributes$taxonomy!="detritus"])))[2]
## Food web metrics
meta$S[i] <- Number.of.species(bin.matrix)
meta$L[i] <- Number.of.links(bin.matrix)
meta$LD[i] <- Link.density(bin.matrix)
meta$C[i] <- Connectance(bin.matrix)
meta$B[i] <- Bottom.Intermediate.Top(bin.matrix)$Proportions.of.each[1]
meta$I[i] <- Bottom.Intermediate.Top(bin.matrix)$Proportions.of.each[2]
meta$T[i] <- Bottom.Intermediate.Top(bin.matrix)$Proportions.of.each[3]
meta$generality[i] <- Gen.sd(bin.matrix)
meta$vulnerability[i] <- Vul.sd(bin.matrix)
meta$MeanTL[i] <- mean(TL(bin.matrix))
meta$MaxTL[i] <- max(TL(bin.matrix))
#meta$modularity[i] <- cluster_spinglass(igraph)$modularity
# plot fluxes
# community object for prey-averaged trophic level
flux.igraph <- graph_from_adjacency_matrix(flux, mode="directed", weighted=TRUE)
nodes.ched <- data.frame("node"=colnames(matrix))
edge.list <- data.frame(as_edgelist(igraph))
colnames(edge.list) = c("resource", "consumer")
ched <- Community(nodes=nodes.ched, properties=list(title=i), trophic.links=edge.list)
patl <-   PreyAveragedTrophicLevel(ched)
V(flux.igraph)$size <- (nodes$biomass - min(nodes$biomass,na.rm=T)) / (max(nodes$biomass,na.rm=T) - min(nodes$biomass,na.rm=T))*20
V(flux.igraph)$size[is.na(V(flux.igraph)$size)] <- 10
#V(flux.igraph)$size <- 10
cols <- brewer.pal(12, "Paired")
V(flux.igraph)$color[nodes$species_type=="detritus"] <- cols[11]
V(flux.igraph)$color[nodes$species_type=="phytoplankton"] <- cols[3]
V(flux.igraph)$color[nodes$species_type=="zooplankton"] <- cols[7]
V(flux.igraph)$color[nodes$species_type=="fish"] <- cols[5]
V(flux.igraph)$label.color[nodes$species_type=="detritus"] <- cols[12]
V(flux.igraph)$label.color[nodes$species_type=="phytoplankton"] <- cols[4]
V(flux.igraph)$label.color[nodes$species_type=="zooplankton"] <- cols[8]
V(flux.igraph)$label.color[nodes$species_type=="fish"] <- cols[6]
E(flux.igraph)$weight <- E(flux.igraph)$weight*10000
ys <- patl
ys[patl==1] <- jitter(ys[patl==1],8)
ys[patl==2] <- jitter(ys[patl==2],8)
xs <- rep(0,nrow(nodes))
xs[patl==1] <- seq(0.2,1,length.out=sum(patl==1))
xs[patl>1] <- seq(0,1,length.out=sum(patl>1))
xs[patl>2] <- seq(0,1,length.out=sum(patl>2))
xs[nodes$taxonomy=="benthic detritus"] <- 0
ys[degree(flux.igraph)==0] <- 0.5
png(paste0("C:/Users/darren/OneDrive - University of Canberra/Workflows/FuSED/Adirondack flux analysis/fluxplots/",lake,".png"), width=15, height=15, units="cm", res=400)
plot(flux.igraph, layout=cbind(xs,ys), edge.arrow.size=0.25, edge.width=E(flux.igraph)$weight,
vertex.color = V(flux.igraph)$color, vertex.label.cex=0.5)
dev.off()
}
nodes <- read.csv(paste0("/sp_att/Adirondack_spAttributes_",lake,".csv"))
nodes <- read.csv(paste0("/sp_att/",lake,".csv"))
nodes <- read.csv(paste0("sp_att/",lake,".csv"))
nodes <- read.csv(paste0("sp_att/",lake,".csv"))
nodes <- read.csv(paste0("sp_att/Lakes_spAttributes_",lake,".csv"))
matrix <- as.matrix(read.csv(paste0("adj_mat/Adirondack_matrix_",lake,".csv"), row.names = 1))
matrix <- as.matrix(read.csv(paste0("adj_mat/Lakes_matrix_",lake,".csv"), row.names = 1))
# check order
nodes <- nodes[order(nodes$taxonomy),]
matrix <- matrix[order(colnames(matrix)),order(colnames(matrix))]
print(i)
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# remove taxa that do not have matches, and with 0 density
unmatched.rows <- NULL; fishy <- NULL; detr <- NULL
unmatched.rows <- which(is.na(nodes$Count.of.Lake_species)) # which are missing? Could not be matched with density from report
eggs <- which(grepl("fish eggs", nodes$Lake_species)) # but keep fish eggs
detr <- which(grepl("detritus", nodes$Lake_species))  # but keep detritus
nauplii <- which(grepl("nauplii", nodes$Lake_species))
unmatched.rows <- unmatched.rows[!(unmatched.rows %in% c(detr))] ## <--- add 'eggs' here to keep eggs
phyto0 <- which(is.na(nodes$density) & nodes$species_type == "phytoplankton") # phytoplankton with 0 density reported
unmatched.rows <- c(unmatched.rows, phyto0)
if(length(unmatched.rows)>0) {
nodes <- nodes[-unmatched.rows,]
matrix <- matrix[-unmatched.rows,-unmatched.rows]
}
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# temperature
temp <- meta$mean_temp_C[meta$FW_name_database==lake]
temp.kT <- ((273.15+temp)-T0)/(boltz*(273.15+temp)*T0)
# losses
nodes$losses <- 0
nodes$losses[nodes$metabolic.type=="invertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="invertebrate"]
nodes$losses[nodes$metabolic.type=="ectotherm vertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="ectotherm vertebrate"]) + 18.47) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="ectotherm vertebrate"]
## Loses for fish eggs?? - unknown density - currently these are omitted anyway
nodes$losses[is.na(nodes$losses)] <- 0
# efficiencies
nodes$efficiencies[nodes$species_type=="zooplankton" | nodes$species_type=="fish"] <- exp(2.266)*exp(0.164*temp.kT) / (1 + exp(2.266)*exp(0.164*temp.kT)) #animal
nodes$efficiencies[nodes$species_type=="phytoplankton"] <- exp(0.179)*exp(0.164*temp.kT) / (1 + exp(0.179)*exp(0.164*temp.kT)) # plant
nodes$efficiencies[nodes$species_type=="detritus"] <- exp(-1.670)*exp(0.164*temp.kT) / (1 + exp(-1.670)*exp(0.164*temp.kT)) #detritus
# preferences (biomass matrix)
B.matrix <- matrix * nodes$biomass
# imports
lake <- NULL; nodes <- NULL; matrix<-NULL
lake <- lakes[i]
nodes <- read.csv(paste0("sp_att/Lakes_spAttributes_",lake,".csv"))
# corrections to match database
nodes$taxonomy[nodes$taxonomy=="Salmo trutta"] <- "Salmo rutta" # should be trutta but match to incorrect edgelist
nodes$taxonomy[nodes$taxonomy=="Anabaena flos-aquae"] <- "Anabaena flos.aquae"
matrix <- as.matrix(read.csv(paste0("adj_mat/Lakes_matrix_",lake,".csv"), row.names = 1))
# check order
nodes <- nodes[order(nodes$taxonomy),]
matrix <- matrix[order(colnames(matrix)),order(colnames(matrix))]
print(i)
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# remove taxa that do not have matches, and with 0 density
unmatched.rows <- NULL; fishy <- NULL; detr <- NULL
unmatched.rows <- which(is.na(nodes$Count.of.Lake_species)) # which are missing? Could not be matched with density from report
eggs <- which(grepl("fish eggs", nodes$Lake_species)) # but keep fish eggs
detr <- which(grepl("detritus", nodes$Lake_species))  # but keep detritus
nauplii <- which(grepl("nauplii", nodes$Lake_species))
unmatched.rows <- unmatched.rows[!(unmatched.rows %in% c(detr))] ## <--- add 'eggs' here to keep eggs
phyto0 <- which(is.na(nodes$density) & nodes$species_type == "phytoplankton") # phytoplankton with 0 density reported
unmatched.rows <- c(unmatched.rows, phyto0)
if(length(unmatched.rows)>0) {
nodes <- nodes[-unmatched.rows,]
matrix <- matrix[-unmatched.rows,-unmatched.rows]
}
print(all(colnames(matrix) == gsub(" ", ".", nodes$taxonomy)))
# temperature
temp <- meta$mean_temp_C[meta$FW_name_database==lake]
temp.kT <- ((273.15+temp)-T0)/(boltz*(273.15+temp)*T0)
# losses
nodes$losses <- 0
nodes$losses[nodes$metabolic.type=="invertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="invertebrate"]
nodes$losses[nodes$metabolic.type=="ectotherm vertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="ectotherm vertebrate"]) + 18.47) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="ectotherm vertebrate"]
nodes$metabolic.type
nodes$metabolic.type=="invertebrate"
exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="invertebrate"]
nodes$density.comb[nodes$metabolic.type=="invertebrate"]
exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp)))
log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"])
0.69/(boltz*(273.15+temp))
boltz
temp
# temperature
temp <- meta$mean_temp_C[meta$FW_name_database==lake]
temp
meta$mean_temp_C
meta
meta$mean_temp_C
names(meta)
# temperature
temp <- meta$temperature_C[meta$FW_name_database==lake]
temp
meta$temperature_C
# temperature
temp <- 10
temp.kT <- ((273.15+temp)-T0)/(boltz*(273.15+temp)*T0)
# losses
nodes$losses <- 0
nodes$losses[nodes$metabolic.type=="invertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="invertebrate"]) + 17.17) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="invertebrate"]
nodes$losses[nodes$metabolic.type=="ectotherm vertebrate"] <- exp((0.71 * log(nodes$mass.mean.g.[nodes$metabolic.type=="ectotherm vertebrate"]) + 18.47) - 0.69/(boltz*(273.15+temp))) * nodes$density.comb[nodes$metabolic.type=="ectotherm vertebrate"]
## Loses for fish eggs?? - unknown density - currently these are omitted anyway
nodes$losses[is.na(nodes$losses)] <- 0
# efficiencies
nodes$efficiencies[nodes$species_type=="zooplankton" | nodes$species_type=="fish"] <- exp(2.266)*exp(0.164*temp.kT) / (1 + exp(2.266)*exp(0.164*temp.kT)) #animal
nodes$efficiencies[nodes$species_type=="phytoplankton"] <- exp(0.179)*exp(0.164*temp.kT) / (1 + exp(0.179)*exp(0.164*temp.kT)) # plant
nodes$efficiencies[nodes$species_type=="detritus"] <- exp(-1.670)*exp(0.164*temp.kT) / (1 + exp(-1.670)*exp(0.164*temp.kT)) #detritus
# preferences (biomass matrix)
B.matrix <- matrix * nodes$biomass
# missing detritus node given sum of phytoplankton biomass for each predator (i.e. equal weight to green/brown origin)
missing.detritus <- nodes$species_type=="detritus"
B.matrix[missing.detritus,] <- rep(colSums(B.matrix[nodes$species_type=="phytoplankton",], na.rm=T) / sum(missing.detritus), each=sum(missing.detritus))
B.matrix[matrix!=0 & B.matrix==0] <- 1 # for when detritus is the only food source
## Fluxweb analysis
diag(B.matrix) <- 0   ## Make sure there are no cannibalistic links
bin.matrix <- B.matrix
bin.matrix[bin.matrix>0] <- 1
igraph <- graph_from_adjacency_matrix(bin.matrix, mode="directed")
attributes <- nodes
attributes$losses[is.na(attributes$losses)] <- 0
## Calculating fluxes
flux <- fluxing(mat=B.matrix, losses=attributes$losses, efficiencies=attributes$efficiencies, bioms.losses=F, bioms.prefs = F) * perday
meta$flux[i] <- sum(flux)
meta$animal.flux[i] <- sum(flux[attributes$species_type=="zooplankton" | attributes$species_type=="fish",])
meta$plant.flux[i] <- sum(flux[attributes$species_type=="phytoplankton",])
meta$detritus.flux[i] <- sum(flux[attributes$species_type=="detritus",])
meta$ratio.flux[i] <- meta$animal.flux[i] / sum(meta$plant.flux[i] + meta$detritus.flux[i])
## Biomass distributions
meta$biomass[i] <- sum(attributes$biomass, na.rm=T)
meta$animal.biomass[i] <- sum(attributes$biomass[attributes$species_type=="zooplankton" | attributes$species_type=="fish"], na.rm=T)
meta$plant.biomass[i] <- sum(attributes$biomass[attributes$species_type=="phytoplankton"], na.rm=T)
#meta$detritus.biomass[i] <- sum(attributes$biomass[attributes$species_type=="detritus"], na.rm=T)
meta$ratio.biomass[i] <- meta$animal.biomass[i] / meta$plant.biomass[i]
meta$MNslope[i] <- coef(lm(log10(attributes$density.comb[attributes$taxonomy!="detritus"]) ~ log10(attributes$mass.mean.g.[attributes$taxonomy!="detritus"])))[2]
## Food web metrics
meta$S[i] <- Number.of.species(bin.matrix)
meta$L[i] <- Number.of.links(bin.matrix)
meta$LD[i] <- Link.density(bin.matrix)
############# stability ###############
# I first need a vector that encodes for species types (animal, detritus or plant)
# here I assume that the vectors created L97-99 contain this information
met.types = rep('animal', nrow(bin.matrix))
met.types[plants] = 'plant'
animals <- attributes$metabolic.type == "invertebrate" | attributes$metabolic.type == "ectotherm vertebrate"
plants <- attributes$metabolic.type == "primary producer"
detritus <- attributes$metabolic.type == "detritus"
# I first need a vector that encodes for species types (animal, detritus or plant)
# here I assume that the vectors created L97-99 contain this information
met.types = rep('animal', nrow(bin.matrix))
met.types[plants] = 'plant'
met.types[detritus] = 'detritus'
# Then I can compute the stability
stab = stability.value(val.mat = flux,
biomasses = attributes$biomass,
efficiencies = efficiencies=attributes$efficiencies,
animals <- attributes$metabolic.type == "invertebrate" | attributes$metabolic.type == "ectotherm vertebrate"
plants <- attributes$metabolic.type == "primary producer"
detritus <- attributes$metabolic.type == "detritus"
# I first need a vector that encodes for species types (animal, detritus or plant)
# here I assume that the vectors created L97-99 contain this information
met.types = rep('animal', nrow(bin.matrix))
met.types[plants] = 'plant'
met.types[detritus] = 'detritus'
# Then I can compute the stability
stab = stability.value(val.mat = flux,
biomasses = attributes$biomass,
efficiencies = efficiencies=attributes$efficiencies,
# Then I can compute the stability
stab = stability.value(val.mat = flux,
biomasses = attributes$biomass,
efficiencies = attributes$efficiencies,
metabolic.types = met.types,
ef.level = "prey"
)
attributes$biomass
